#pragma once
#include "detector_setup.h"

#include <phgenfit/Track.h>
#include <fun4all/Fun4AllDstInputManager.h>
#include <fun4all/Fun4AllDstOutputManager.h>
#include <fun4all/Fun4AllDummyInputManager.h>
#include <fun4all/Fun4AllInputManager.h>
#include <fun4all/Fun4AllNoSyncDstInputManager.h>
#include <fun4all/Fun4AllOutputManager.h>
#include <fun4all/Fun4AllServer.h>
#include <fun4all/SubsysReco.h>
#include <g4detectors/PHG4DetectorSubsystem.h>
#include <g4detectors/PHG4CylinderSubsystem.h>
#include <phpythia8/PHPythia8.h>
#include <g4histos/G4HitNtuple.h>
#include <g4lblvtx/AllSiliconTrackerSubsystem.h>
#include <g4main/HepMCNodeReader.h>
#include <g4main/PHG4ParticleGenerator.h>
#include <g4main/PHG4ParticleGeneratorBase.h>
#include <g4main/PHG4ParticleGun.h>
#include <g4main/PHG4Reco.h>
#include <g4main/PHG4SimpleEventGenerator.h>
#include <g4main/PHG4TruthSubsystem.h>
#include <g4trackfastsim/PHG4TrackFastSim.h>
#include <g4trackfastsim/PHG4TrackFastSimEval.h>
#include <phool/recoConsts.h>

#include <g4lblvtx/PHG4ParticleGenerator_flat_pT.h>

#include "G4_BlackHole.C"
#include "G4_Pipe_EIC.C"

//gdml
#include <gdmlimporter/GdmlImportDetectorSubsystem.h>
#include <gdmlimporter/SimpleNtuple.h>
#include <gdmlimporter/TrackFastSimEval.h>
#include <g4detectors/PHG4GDMLSubsystem.h>

#include <EicToyModelSubsystem.h>
#include <EicRootGemSubsystem.h>
#include <EtmOrphans.h>

R__LOAD_LIBRARY(libeicdetectors.so)

R__LOAD_LIBRARY(libgdmlimportdetector.so)

R__LOAD_LIBRARY(libfun4all.so)
R__LOAD_LIBRARY(libg4detectors.so)
R__LOAD_LIBRARY(libg4lblvtx.so)
R__LOAD_LIBRARY(libg4trackfastsim.so)

R__LOAD_LIBRARY(libg4testbench.so)
R__LOAD_LIBRARY(libg4histos.so)

void Fun4All_G4_EPIC_disksOnly(
			int nEvents = -1,			// number of events
			double pmin = 0., 			// GeV/c
			double pmax = 10., 			// GeV/c
			double etamin = -3.5,
			double etamax = 3.5,
			TString out_name = "EPIC")	// output filename
{

  gSystem->Load("libfun4all");
  gSystem->Load("libg4detectors");
  gSystem->Load("libg4testbench");
  gSystem->Load("libg4histos");
  //gSystem->Load("libg4example01detector.so");
  gSystem->Load("libg4trackfastsim.so");


  // Make the Server
  Fun4AllServer *se = Fun4AllServer::instance();
  // If you want to fix the random seed for reproducibility
  //recoConsts *rc = recoConsts::instance();
  //rc->set_IntFlag("RANDOMSEED", 12345);
  
  double pix_size_vtx = 10.; // um - size of pixels in vertexing layers
  double pix_size_bar = 10.; // um - size of pixels in barrel layers
  double pix_size_dis = 10.; // um - size of pixels in disk layers
  
  
  // Particle generator flat in pT
  PHG4ParticleGenerator *gen = new PHG4ParticleGenerator();
  gen->set_name(std::string("pi-"));     // geantino, pi-, pi+, mu-, e-, proton etc
  gen->set_vtx(0,0,0);                    // Vertex generation range
  gen->set_mom_range(pmin,pmax);         // Momentum generation range in GeV/c
  gen->set_z_range(0.,0.);
  gen->set_eta_range(etamin, etamax);               // Detector coverage corresponds to |Î·|< 4
  gen->set_phi_range(0.,2.*TMath::Pi());
  se->registerSubsystem(gen);
  
  PHG4Reco *g4Reco = new PHG4Reco();
  //g4Reco->SetWorldMaterial("G4_Galactic");	
  EicGeoParData::ImportMediaFile("/scratch/EicToyModel/examples/eicroot/media.geo");
  
  g4Reco->set_field_map(string(getenv("CALIBRATIONROOT")) + string("/Field/Map/sPHENIX.2d.root"), PHFieldConfig::kField2D);
  g4Reco->set_field_rescale(-1.7/1.5);
  
  // Detector setup
  PHG4CylinderSubsystem *cyl;
  
#ifdef _SIVTX_
  //---------------------------
  // Vertexing
  double si_vtx_r_pos[] = {3.6,4.8,12.};
  const int nVtxLayers = sizeof(si_vtx_r_pos)/sizeof(*si_vtx_r_pos);
  double si_z_vtxlength[] = {27., 27., 27.};
  double si_thick_vtx = 0.05/100.*9.37;
  
  for (int ilayer = 0; ilayer < nVtxLayers ; ilayer++){
    string name = Form("SVTX_%i", ilayer);
    cyl = new PHG4CylinderSubsystem("SVTX", ilayer);
    cyl->set_string_param("material" , "G4_Si"               );
    cyl->set_double_param("radius"   , si_vtx_r_pos[ilayer]  );
    cyl->set_double_param("thickness", si_thick_vtx          );
    cyl->set_double_param("place_z"  , 0                     );
    cyl->set_double_param("length"   , si_z_vtxlength[ilayer]);
    cyl->SetActive();
    cyl->SuperDetector(name);
    cyl->set_color(0,0.8,0.1);
    g4Reco->registerSubsystem(cyl);
  }
#endif
  
#ifdef _SIBARR_
  //---------------------------
  // Barrel
  double si_r_pos[] = {27., 42.};
  double si_z_length[] = {54., 84.};
  const int nTrckLayers = sizeof(si_r_pos)/sizeof(*si_r_pos);
  
  double si_thick_bar = 0.55/100.*9.37;
  
  for (int ilayer = 0; ilayer < nTrckLayers ; ilayer++){
    string name = Form("BARR_%i", ilayer);
    cyl = new PHG4CylinderSubsystem("BARR", ilayer);
    cyl->set_string_param("material" , "G4_Si"            );
    cyl->set_double_param("radius"   , si_r_pos[ilayer]   );
    cyl->set_double_param("thickness", si_thick_bar       );
    cyl->set_double_param("place_z"  , 0                  );
    cyl->set_double_param("length"   , si_z_length[ilayer]);
    cyl->SetActive();
    cyl->SuperDetector(name);
    cyl->set_color(0,0.5,1);
    g4Reco->registerSubsystem(cyl);	
  }
#endif
  
#ifdef _SIDISKS_
  //---------------------------
  // Disks
  double si_z_pos[10] = {-135, -100, -70, -45, -25, 25, 45, 70, 100, 135};
  const int nDisks = sizeof(si_z_pos)/sizeof(*si_z_pos);
  // double si_r_max[10]= {59., 43., 43., 43., 19., 19., 43., 43., 43., 53.};
  // double si_r_min[nDisks] = {4.5, 3.9, 3.6, 3.6, 3.6, 3.6, 3.6, 3.6, 4.5, 5.4};
  // Reduced Acceptance
  double si_r_max[10]= {59., 38.67, 38.93, 38.93, 19., 19., 38.93, 38.93, 38.67, 53.};
  double si_r_min[nDisks] = {5.65, 5.33, 4.54, 4.54, 4.54, 4.54, 4.54, 4.63, 5.61, 6.78};
  double x_offset[nDisks] = {-0.7, -0.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8, 1.7};
  double si_thick_disk = 0.24/100.*9.37;
  
  
  for (int ilayer = 0; ilayer < nDisks ; ilayer++){
    string name = Form("FBST_%i", ilayer);
    cyl = new PHG4CylinderSubsystem("FBST", ilayer);
    cyl->set_string_param("material" , "G4_Si"         );
    cyl->set_double_param("radius"   , si_r_min[ilayer]);
    cyl->set_double_param("thickness", si_r_max[ilayer]-si_r_min[ilayer]);
    cyl->set_double_param("place_z"  , si_z_pos[ilayer]);
    cyl->set_double_param("place_x"  , x_offset[ilayer]);
    cyl->set_double_param("length"   , si_thick_disk   );
    cyl->SetActive();
    cyl->SuperDetector(name);
    cyl->set_color(1,0,0);
    g4Reco->registerSubsystem(cyl);
    
  }
#endif
  
#ifdef _BLACKHOLE_
  //Full Wrap single Cylinder
  wrap_with_cylindrical_blackhole(g4Reco,120,-250,380,true);
#endif
  
#ifdef _BEAMPIPE_
  PipeInit();
  double pipe_radius=0;	
  pipe_radius = Pipe(g4Reco, pipe_radius , true);	
#endif
  
  PHG4TruthSubsystem *truth = new PHG4TruthSubsystem();
  g4Reco->registerSubsystem(truth);
  
  se->registerSubsystem(g4Reco);
  
  
  G4HitNtuple *hits = new G4HitNtuple("Hits");
  hits->AddNode("SVTX",0);
  se->registerSubsystem(hits);

  //---------------------------
  // fast pattern recognition and full Kalman filter
  // output evaluation file for truth track and reco tracks are PHG4TruthInfoContainer
  //---------------------------
  PHG4TrackFastSim *kalman = new PHG4TrackFastSim("PHG4TrackFastSim");
  kalman->set_use_vertex_in_fitting(false);
  kalman->set_sub_top_node_name("BARR");
  kalman->set_trackmap_out_name("SvtxTrackMap");

#ifdef _SIVTX_
  // add Vertexing Layers
  kalman->add_phg4hits(
		       "G4HIT_SVTX",				// const std::string& phg4hitsNames,
		       PHG4TrackFastSim::Cylinder,
		       999.,					// radial-resolution [cm]
		       pix_size_vtx/10000./sqrt(12.),		// azimuthal-resolution [cm]
		       pix_size_vtx/10000./sqrt(12.),		// z-resolution [cm]
		       1,					// efficiency,
		       0					// noise hits
		       );
#endif

#ifdef _SIBARR_
  // add Barrel Layers
  kalman->add_phg4hits(
		       "G4HIT_BARR",                   	// const std::string& phg4hitsNames,
		       PHG4TrackFastSim::Cylinder,
		       999.,                           	// radial-resolution [cm]
		       pix_size_bar/10000./sqrt(12.),      	// azimuthal-resolution [cm]
		       pix_size_bar/10000./sqrt(12.),      	// z-resolution [cm]
		       1,                              	// efficiency,
		       0                               	// noise hits
		       );
#endif
  
#ifdef _SIDISKS_
  //  add Disk Layers
  kalman->add_phg4hits(
		       "G4HIT_FBST",				// const std::string& phg4hitsNames,
		       PHG4TrackFastSim::Vertical_Plane,
		       pix_size_dis/10000./sqrt(12.),		// radial-resolution [cm]
		       pix_size_dis/10000./sqrt(12.),		// azimuthal-resolution [cm]
		       999.,                       		// z-resolution [cm]
		       1,                          		// efficiency,
		       0                           		// noise hits
		       );	
#endif
  
  se->registerSubsystem(kalman);

  
  std::string outputFile = (std::string)(out_name)+"_FastSimEval.root";
  
  PHG4TrackFastSimEval *fast_sim_eval = new PHG4TrackFastSimEval("FastTrackingEval");
  fast_sim_eval->set_filename(outputFile);
  se->registerSubsystem(fast_sim_eval);
  
  
  if (nEvents <= 0) return;
  
  se->run(nEvents);
  se->End();
  delete se;
  
  gSystem->Exit(0);
}
