#ifndef MACRO_FUN4ALLG4EICDETECTOR_C
#define MACRO_FUN4ALLG4EICDETECTOR_C

#include <GlobalVariables.C>

#include <DisplayOn.C>
#include "G4Setup_EICDetector.C"
#include <G4_DSTReader_EICDetector.C>
#include <G4_EventEvaluator.C>
//#include <G4_FwdJets.C>
#include <G4_Global.C>
#include <G4_Input.C>
//#include <G4_Production.C>
//#include <G4_User.C>

#include <TROOT.h>
//#include <fun4all/Fun4AllDstOutputManager.h>
//#include <fun4all/Fun4AllOutputManager.h>
#include <fun4all/Fun4AllServer.h>

#include <phool/recoConsts.h>

#include <RooUnblindPrecision.h>

R__LOAD_LIBRARY(libfun4all.so)

int Fun4All_G4_MPGDonly(
    const int nEvents = 100,
    double pmin = 0., 			// GeV/c
    double pmax = 30., 			// GeV/c
    double etamin = -3.5,
    double etamax = 3.5,
    const string &outputFile = "G4EICDetector.root",
    const string &inputFile = "https://www.phenix.bnl.gov/WWW/publish/phnxbld/sPHENIX/files/sPHENIX_G4Hits_sHijing_9-11fm_00000_00010.root",
    const string &embed_input_file = "https://www.phenix.bnl.gov/WWW/publish/phnxbld/sPHENIX/files/sPHENIX_G4Hits_sHijing_9-11fm_00000_00010.root",
    const int skip = 0,
    const string &outdir = "/home/scm")
{
  //---------------
  // Fun4All server
  //---------------
  Fun4AllServer *se = Fun4AllServer::instance();
  se->Verbosity(0);
  //Opt to print all random seed used for debugging reproducibility. Comment out to reduce stdout prints.
  //PHRandomSeed::Verbosity(1);

  // just if we set some flags somewhere in this macro
  recoConsts *rc = recoConsts::instance();
  // By default every random number generator uses
  // PHRandomSeed() which reads /dev/urandom to get its seed
  // if the RANDOMSEED flag is set its value is taken as initial seed
  // which will produce identical results so you can debug your code
  // rc->set_IntFlag("RANDOMSEED", 12345);

  bool generate_seed = false;

  if (generate_seed)
  {
    size_t findSlash = inputFile.find_last_of("/");
    string inputFileName = inputFile.substr(findSlash + 1, inputFile.size());

    RooRealVar dummyVal("dummy", "", 0);
    RooUnblindPrecision blindVal("blindVal", "blindVal", inputFileName.c_str(), nEvents, skip + 1, dummyVal, kFALSE);
    rc->set_IntFlag("RANDOMSEED", abs(ceil(blindVal.getVal() * 1e2)));
  }

  //===============
  // Input options
  //===============

  // switching IPs by comment/uncommenting the following lines
  // used for both beamline setting and for the event generator crossing boost
  Enable::IP6 = true;
  //Enable::IP8 = true;


  // Simple multi particle generator in eta/phi/pt ranges
  Input::SIMPLE = true;
  // Input::SIMPLE_NUMBER = 2; // if you need 2 of them
  // Input::SIMPLE_VERBOSITY = 1;


  //-----------------
  // Initialize the selected Input/Event generation
  //-----------------
  InputInit();
  //--------------
  // Set generator specific options
  //--------------
  // can only be set after InputInit() is called

  // Simple Input generator:
  // if you run more than one of these Input::SIMPLE_NUMBER > 1
  // add the settings for other with [1], next with [2]...
  if (Input::SIMPLE)
  {
    INPUTGENERATOR::SimpleEventGenerator[0]->add_particles("pi-", 1);
    if (Input::HEPMC || Input::EMBED)
    {
      INPUTGENERATOR::SimpleEventGenerator[0]->set_reuse_existing_vertex(true);
      INPUTGENERATOR::SimpleEventGenerator[0]->set_existing_vertex_offset_vector(0.0, 0.0, 0.0);
    }
    else
    {
      INPUTGENERATOR::SimpleEventGenerator[0]->set_vertex_distribution_function(PHG4SimpleEventGenerator::Uniform,
										PHG4SimpleEventGenerator::Uniform,
										PHG4SimpleEventGenerator::Uniform);
      INPUTGENERATOR::SimpleEventGenerator[0]->set_vertex_distribution_mean(0., 0., 0.);
      INPUTGENERATOR::SimpleEventGenerator[0]->set_vertex_distribution_width(0., 0., 0.);

      // Distribute vertex position according to Beam Effects document Fig. 17 (18x275 e-p)
      // INPUTGENERATOR::SimpleEventGenerator[0]->set_vertex_distribution_function(PHG4SimpleEventGenerator::Gaus,
      // PHG4SimpleEventGenerator::Gaus,
      // PHG4SimpleEventGenerator::Gaus);
      // INPUTGENERATOR::SimpleEventGenerator[0]->set_vertex_distribution_mean(-0.0001, -0.0000077, -0.031);
      // INPUTGENERATOR::SimpleEventGenerator[0]->set_vertex_distribution_width(0.01894, 0.00100675, 3.292);
    }
    INPUTGENERATOR::SimpleEventGenerator[0]->set_eta_range(etamin, etamax);
    INPUTGENERATOR::SimpleEventGenerator[0]->set_phi_range(-M_PI, M_PI);
    INPUTGENERATOR::SimpleEventGenerator[0]->set_pt_range(pmin, pmax);
  }
  // Upsilons
  // if you run more than one of these Input::UPSILON_NUMBER > 1
  // add the settings for other with [1], next with [2]...
  if (Input::UPSILON)
  {
    INPUTGENERATOR::VectorMesonGenerator[0]->add_decay_particles("mu", 0);
    INPUTGENERATOR::VectorMesonGenerator[0]->set_rapidity_range(-1, 1);
    INPUTGENERATOR::VectorMesonGenerator[0]->set_pt_range(0., 10.);
    // Y species - select only one, last one wins
    INPUTGENERATOR::VectorMesonGenerator[0]->set_upsilon_1s();
    if (Input::HEPMC || Input::EMBED)
    {
      INPUTGENERATOR::VectorMesonGenerator[0]->set_reuse_existing_vertex(true);
      INPUTGENERATOR::VectorMesonGenerator[0]->set_existing_vertex_offset_vector(0.0, 0.0, 0.0);
    }
  }
  // particle gun
  // if you run more than one of these Input::GUN_NUMBER > 1
  // add the settings for other with [1], next with [2]...
  if (Input::GUN)
  {
    INPUTGENERATOR::Gun[0]->AddParticle("pi-", 0, 1, 0);
    INPUTGENERATOR::Gun[0]->set_vtx(0, 0, 0);
  }

  if (Input::IONGUN)
   {
     float theta = -25e-3;
 
     INPUTGENERATOR::IonGun[0]->SetA(197);
     INPUTGENERATOR::IonGun[0]->SetZ(79);
     INPUTGENERATOR::IonGun[0]->SetCharge(79);
     INPUTGENERATOR::IonGun[0]->SetMom(sin(theta)*110*197, 0,cos(theta)*110*197); // -25 mrad                        

     INPUTGENERATOR::IonGun[0]->Print();

   }

  // pythia6
  if (Input::PYTHIA6)
  {
    INPUTGENERATOR::Pythia6->set_config_file(string(getenv("CALIBRATIONROOT")) + "/Generators/phpythia6_ep.cfg");
    //! apply EIC beam parameter following EIC CDR
    Input::ApplyEICBeamParameter(INPUTGENERATOR::Pythia6);
  }
  // pythia8
  if (Input::PYTHIA8)
  {
    //! apply EIC beam parameter following EIC CDR
    Input::ApplyEICBeamParameter(INPUTGENERATOR::Pythia8);
  }
  // Sartre
  if (Input::SARTRE)
  {
    //! apply EIC beam parameter following EIC CDR
    Input::ApplyEICBeamParameter(INPUTGENERATOR::Sartre);
  }

  //--------------
  // Set Input Manager specific options
  //--------------
  // can only be set after InputInit() is called

  if (Input::HEPMC)
  {
    //! apply EIC beam parameter following EIC CDR
    Input::ApplyEICBeamParameter(INPUTMANAGER::HepMCInputManager);
    // optional overriding beam parameters
    //INPUTMANAGER::HepMCInputManager->set_vertex_distribution_width(100e-4, 100e-4, 30, 0);  //optional collision smear in space, time
    //    INPUTMANAGER::HepMCInputManager->set_vertex_distribution_mean(0,0,0,0);//optional collision central position shift in space, time
    // //optional choice of vertex distribution function in space, time
    // INPUTMANAGER::HepMCInputManager->set_vertex_distribution_function(PHHepMCGenHelper::Gaus, PHHepMCGenHelper::Gaus, PHHepMCGenHelper::Gaus, PHHepMCGenHelper::Gaus);
    //! embedding ID for the event
    //! positive ID is the embedded event of interest, e.g. jetty event from pythia
    //! negative IDs are backgrounds, .e.g out of time pile up collisions
    //! Usually, ID = 0 means the primary Au+Au collision background
    //INPUTMANAGER::HepMCInputManager->set_embedding_id(2);
  }

  // register all input generators with Fun4All
  InputRegister();

  // Reads event generators in EIC smear files, which is registered in InputRegister
  if (Input::READEIC)
  {
    //! apply EIC beam parameter following EIC CDR
    INPUTGENERATOR::EICFileReader->SetFirstEntry(skip);
    Input::ApplyEICBeamParameter(INPUTGENERATOR::EICFileReader);
  }

  // set up production relatedstuff
  //   Enable::PRODUCTION = true;

  //======================
  // Write the DST
  //======================

  //Enable::DSTOUT = false;// write out DST files
  //DstOut::OutputDir = outdir;
  //DstOut::OutputFile = outputFile;
  //Enable::DSTOUT_COMPRESS = true;  // Compress DST files

  //Option to convert DST to human command readable TTree for quick poke around the outputs
  // Enable::DSTREADER = true;

  // turn the display on (default off)
  //Enable::DISPLAY = true; 
  //======================
  // What to run
  //======================
  // Global options (enabled for all subsystems - if implemented)
  //  Enable::ABSORBER = true;
  //  Enable::OVERLAPCHECK = true;
  //  Enable::VERBOSITY = 1;

  // whether to simulate the Be section of the beam pipe
  Enable::PIPE = false;
  // If need to disable EIC beam pipe extension beyond the Be-section:
  G4PIPE::use_forward_pipes = false;

  //// gems
  //Enable::EGEM = false;
  //Enable::FGEM = false; // deactivated as it's replaced by a FTTL layer
  // Enable::BGEM = true; // not yet defined in this model
  Enable::RWELL = true;
  // barrel tracker
  Enable::TrackingService = false;
  // Enable::TrackingService_VERBOSITY = INT_MAX - 10;
  Enable::BARREL = false;
  // fst
  Enable::FST = false;

  //AC-LGAD  TOFs
  Enable::FTTL = false;
  //Enable::ETTL = true; // SM Disabled 22-11-4 -> LAPPD readout for bwd RICH is favoured option
  Enable::CTTL = false;

  Enable::TRACKING = false;
  Enable::TRACKING_EVAL = Enable::TRACKING && true;
  G4TRACKING::DISPLACED_VERTEX = true;  // this option exclude vertex in the track fitting and use RAVE to reconstruct primary and 2ndary vertexes
                                        // projections to calorimeters

  // EICDetector geometry - barrel
  Enable::DIRC = false;
  Enable::DIRC_RECO = Enable::DIRC && false; // Disabled DIRC reco -SM 22-5-11

  Enable::BMMG = false;
  // Enable::DIRC_VERBOSITY = 2;

  // EICDetector geometry - 'hadron' direction
  Enable::RICH = false; 
  Enable::RICH_RECO = Enable::RICH && false; // Disabled RICH reco -SM 22-5-11

  Enable::TRD = false;
  Enable::TRD_GAS = false;
  // Enable::RICH_VERBOSITY = 2;


  // EICDetector geometry - 'electron' direction
  Enable::mRICH = false; 
  Enable::mRICH_RECO = Enable::mRICH && false; // Disabled mRICH reco -SM 22-5-11
  // Enable::mRICH_VERBOSITY = 2;
  
  // EICDetector geometry - 'electron' direction
  Enable::EEMCH   = false;// Disabled EEMCH -SM 22-6-19
  G4EEMCH::SETTING::USECUSTOMMAPUPDATED = true; // enable proper carbon structure
  G4TTL::SETTING::optionEEMCH           = Enable::EEMCH && true;
  Enable::EHCAL   = false;

  //Enable::FFR_EVAL = Enable::HFARFWD_MAGNETS && Enable::HFARFWD_VIRTUAL_DETECTORS && true;

  Enable::PLUGDOOR = false;

  // Other options
  Enable::GLOBAL_RECO = G4TRACKING::DISPLACED_VERTEX;  // use reco vertex for global event vertex
  Enable::GLOBAL_FASTSIM = false;

  // jet reconstruction
  //Enable::FWDJETS = true;
  //Enable::FWDJETS_EVAL = Enable::FWDJETS && false;

  // new settings using Enable namespace in GlobalVariables.C
  Enable::BLACKHOLE = false;
  //Enable::BLACKHOLE_SAVEHITS = false; // turn off saving of bh hits
  BlackHoleGeometry::visible = true;

    

  //---------------
  // World Settings
  //---------------
  //  G4WORLD::PhysicsList = "FTFP_BERT"; //FTFP_BERT_HP best for calo
  //  G4WORLD::WorldMaterial = "G4_AIR"; // set to G4_GALACTIC for material scans
  //  G4WORLD::WorldMaterial = "G4_Galactic"; // set to G4_GALACTIC for material scans

  //---------------
  // Magnet Settings
  //---------------

  // const string magfield = "1.5"; // alternatively to specify a constant magnetic field, give a float number, which will be translated to solenoidal field in T, if string use as fieldmap name (including path)
  // G4MAGNET::magfield = string(getenv("CALIBRATIONROOT")) + string("/Field/Map/sPHENIX.2d.root");  // default map from the calibration database
  G4MAGNET::magfield = "/common/BFieldMaps/MARCO_v_6_4_1_1_3_1p7T_Magnetic_Field_Map_2022_11_14_radial_coords_[cm]_[T].root";  // MARCO fieldmap stored locally
  // G4MAGNET::magfield_rescale = -1.7/1.5; // Rescale to match 1.7T field of Saclay magnet// -1; reverse direction -1.4 / 1.5;  // make consistent with expected Babar field strength of 1.4T


  // Initialize the selected subsystems
  G4Init();

  //---------------------
  // GEANT4 Detector description
  //---------------------

  // If "readhepMC" is also set, the Upsilons will be embedded in Hijing events, if 'particles" is set, the Upsilons will be embedded in whatever particles are thrown
  if (!Input::READHITS)
  {
    G4Setup();
  }

  //--------------
  // Tracking and PID
  //--------------

  if (Enable::TRACKING) Tracking_Reco();

  if (Enable::DIRC_RECO) DIRCReco();

  if (Enable::mRICH_RECO ) mRICHReco();

  if (Enable::RICH_RECO) RICHReco();

  //-----------------
  // Global Vertexing
  //-----------------

  if (Enable::GLOBAL_RECO)
  {
    Global_Reco();
  }
  else if (Enable::GLOBAL_FASTSIM)
  {
    Global_FastSim();
  }

  //---------
  // Jet reco
  //---------

  //if (Enable::FWDJETS) Jet_FwdReco();

  string outputroot = outputFile;
  string remove_this = ".root";
  size_t pos = outputroot.find(remove_this);
  if (pos != string::npos)
  {
    outputroot.erase(pos, remove_this.length());
  }

  //----------------------
  // Simulation evaluation
  //----------------------


  if (Enable::TRACKING_EVAL) Tracking_Eval(outputroot + "_g4tracking_eval.root");

  //if (Enable::USER) UserAnalysisInit();

  //--------------
  // Set up Input Managers
  //--------------

  InputManagers();

  //--------------
  // Set up Output Manager
  //--------------
  //if (Enable::PRODUCTION)
  //{
  //Production_CreateOutputDir();
  //}

  //if (Enable::DSTOUT)
  //{
  //string FullOutFile = DstOut::OutputDir + "/" + DstOut::OutputFile;
  //Fun4AllDstOutputManager *out = new Fun4AllDstOutputManager("DSTOUT", FullOutFile);
  //if (Enable::DSTOUT_COMPRESS) DstCompress(out);
  //se->registerOutputManager(out);
  //}

  //-----------------
  // Event processing
  //-----------------
  if (Enable::DISPLAY)
  {
    DisplayOn();

    gROOT->ProcessLine("Fun4AllServer *se = Fun4AllServer::instance();");
    gROOT->ProcessLine("PHG4Reco *g4 = (PHG4Reco *) se->getSubsysReco(\"PHG4RECO\");");

    cout << "-------------------------------------------------" << endl;
    cout << "You are in event display mode. Run one event with" << endl;
    cout << "se->run(1)" << endl;
    cout << "Run Geant4 command with following examples" << endl;
    gROOT->ProcessLine("displaycmd()");

    return 0;
  }
  // if we use a negative number of events we go back to the command line here
  if (nEvents < 0)
  {
    return 0;
  }
  // if we run any of the particle generators and use 0 it'll run forever
  if (nEvents == 0 && !Input::READHITS && !Input::HEPMC && !Input::READEIC)
  {
    cout << "using 0 for number of events is a bad idea when using particle generators" << endl;
    cout << "it will run forever, so I just return without running anything" << endl;
    return 0;
  }

  se->skip(skip);
  se->run(nEvents);

  //-----
  // Exit
  //-----

  se->End();
  std::cout << "All done" << std::endl;
  delete se;
  //if (Enable::PRODUCTION)
  //{
  //Production_MoveOutput();
  //}
  gSystem->Exit(0);
  return 0;
}
#endif
